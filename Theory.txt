-------------- Install React.js and Tailwind CSS and Create the first template -------------- 

*	Commands:
	npm create vite@latest    framework >> React;  varient >> javaScript + SWC
	cd folderName --> npm i
	
* 	Extentions:
	ES7, 
	Auto Rename Tag, 
	Multiple cursor case preserve --(cardinal90)
	Prettier - code formatter
	tailwind CSS IntelliSense

*Install Tailwind CSS with Vite 
*remove app.css because we use tailwind css
delete unnessasary files --> src/App.css , public/vite.svg, asset/react.svg
	
	
-------------- CREATE PAGES AND ROUTES -------------- 
	commands :
	npm i react-router-dom
	

-------------- CREATE HEADER COMPONENTS -------------- 
header - flowbite (created based on tailwind css, like boostrap, completely customizable)
	commands: FlowBite -> Docs -> QickStart
	npm i flowbite-react 
	....
	
	npm i react-icons
	
	<Navbar.Link> creates an <a> tag also <Link> creates an <a> too
	2 <a> tags not allowed inside each others

	
-------------- Create and run the server -------------- 
when we deploy the application the server going to read file inside the root directory and understand our code so we need to put the package.json inside the root directory.
	command: 
	npm init -y : this is going to create a package json file for us

	npm i express
default module type is common js. we need to change the type to module.
because we are using import keyword to import
in commonjs using require keyword

	npm i nodemon : detect changes and restart the server
when we deploy our application we need to run it using node, NOT nodemon


-------------- Connect to the database -------------- 
	command: 
	npi i mongoose
	npm i dotenv : to use environment variables


-------------- Create user model -------------- 
model : is kind of rules we're going to set that let us to create this rules & in this case users cannot have access to some parts of the database



-------------- Create a test API route -------------- 



-------------- Create signup API route -------------- 
	commands:
	npm i bcryptjs


-------------- Add a middleware and a function to handle errors -------------- 

middleware to handle errors : each time we have to create different messages and status for our errors, which is a little bit time consuming. we are going to create a middleware to handle these errors .

-------------- Create signup page UI -------------- 



-------------- Add functionality to the sign up page -------------- 
we want add a unchange event listener to each input .

-------------- Create and add the footer component -------------- 

-------------- Create signin API route -------------- 
we need to authenticate users
	command :
	npm i jsonwebtoken

jwt - whatever we add this is going to be encrypted and create a token for us it's like hashing a password. this encrypted value cannot be read normally. and save this encrypted value to the cookie of the browser and then we are going to use it later to authenticate the user

jwt.sign() has 3 parameters to pass;
value -

secret key - unique key, token is going to created and encrypted based on this secret key. this is unique for yourself. otherwise others can hijack users cookie.
users of the website going to have a cookie encrypted uniquely by this secret key and this key can be any letters and numbers, you have to save it in the server of your website

expiresIn - can add expiration time for the cookie as like one day.. it you don't add anything is going to be expired when the user close their browser, as long as their browser is open it is going to be valid


-------------- Complete signin page functionality -------------- 


-------------- Add redux toolkit -------------- 
we want to use information from sign-in respond to add for example user image. we want to use a global state that we can use in header we can use all pages. if you don't use the global state we  have to just pass the state from each component. so the package you want to use for creating global state is Redux toolkit. then we can save that information from sign-in respond in to that redux toolkit global state and use it later in our application.

save information in the front end as a global state.

	command : (frontend)
	npm install @reduxjs/toolkit react-redux
use the reduxtoolkit website quick start guide

	add chrome extention :
	Redux DevTools

-------------- Add redux persist -------------- 
we are going to use redux persist to save the information locally. so when we refresh the page we're not going to lose our information.
check the reduxtoolkit website and search "persist" => # Use with Redux-Persist

	command : 
	npm i redux-persist


-------------- Add Google OAuth functionality -------------- 
we need to sign up gor firebase google.

	command: 
	npm install firebase

-------------- Update header component with user data -------------- 



-------------- Complete sidebar of the dashboard -------------- 
we have to find out which tab we are in. we use a hook called useLocation from react-router-dom.
and then we want to get the parameters we use a method called URLSearchParams to get that.
and then we want to create piece of state called tab so we know which tab we are in
and we want to create a useEffect react hook , inside it we call URLSearchParams constructer in java script to get params

 -------------- Complete user image upload functionality -------------- 

	command:
	npm install --save react-circular-progressbar
	(from www.npmjs.com/package/react-circular-progressbar follow the steps)

-------------- Add update user API route --------------

	command :(backend)
	npm i cookie-parser